datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Admin {
  id    String @id @default(cuid())
  name  String
  email String @unique

  eventAdmins EventAdmin[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password AdminPassword?
}

model AdminPassword {
  hash String

  admin   Admin   @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId String @unique
}

model Participant {
  id    String @id @default(cuid())
  name  String
  email String @unique
  validatedEmail Boolean @default(false)

  signups Signup[]
}

model EventAdmin {
  id    String @unique @default(cuid())
  admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  eventId String
  adminId String
  @@id([eventId, adminId])
}

model Signup {
  id           String @unique @default(cuid())
  event        Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participant  Participant @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  signupTime   DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  signupEventInputValues SignupEventInputValue[]
  
  eventId       String
  participantId String
  @@id([participantId, eventId])
}

model Event {
  id                String @id @default(cuid())
  name              String
  description       String
  location          String
  startDate         DateTime
  endDate           DateTime
  signupStartDate   DateTime @default(now())
  signupEndDate     DateTime
  participantsLimit Int?
  cost              String?

  signups          Signup[]
  eventInputFields EventInputField[]
  eventAdmins      EventAdmin[]
}

model EventInputField {
  id         String @unique @default(cuid())
  event      Event @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inputField InputField @relation(fields: [inputFieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  signupEventInputValues SignupEventInputValue[]
  
  eventId      String
  inputFieldId String
  @@id([eventId, inputFieldId])
}

model SignupEventInputValue {
  id              String @unique @default(cuid())
  signup          Signup @relation(fields: [signupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventInputField EventInputField @relation(fields: [eventInputFieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  value           String
  
  signupId          String
  eventInputFieldId String
  @@id([signupId, eventInputFieldId])
}

model InputField {
  id                String @id @default(cuid())
  name              String
  type              InputFieldType @relation(fields: [typeId], references: [name], onDelete: Cascade, onUpdate: Cascade)
  required          Boolean @default(false)
  options           Option[] // only for InputFieldType.Select
  
  eventInputFields  EventInputField[]
  typeId            String
}

model InputFieldType {
  name String @unique
  
  inputFields InputField[]
}

model Option {
  id         String @unique @default(cuid())
  name       String
  inputField InputField @relation(fields: [inputFieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  inputFieldId String
  @@id([name, inputFieldId])
}